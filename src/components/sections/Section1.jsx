import Section from "../UI/Section";
import InnerContainer from "../UI/InnerContainer";
import NavigationButtons from "../UI/NavigationButtons";

const Section1 = () => {
  return (
    <>
      <NavigationButtons nextPath="/section2" />
      <Section heading={"რა არის ობიექტზე ორიენტირებული პროგრამირება (OOP)?"}>
        <p>
          ობიექტზე ორიენტურებული პროგრამირება არის პროგრამირების პარადიგმა,
          რომელშიც კოდი ორგანიზებულია ობიეტების მიხედვით. ობიექტები შეიცავს
          ინფორმაციას, რომელსაც ვუწოდებთ property-ს და მასთან დაკავშირებულ
          ქცევებს, ფუნქციებს, რომელსაც ეწოდება მეთოდები. აქედან გამომდინარე ჩვენ
          შეიძლება ვთქვათ რომ ობიქტი არის ერთგვარი ქვე აპლიკაცია. ისინი
          წარმოადგენს, ასე ვთქვათ, საშენ მასალებს რომელთა ერთმანეთთან
          ინტერაქციით მიიღება სრული აპლიკაცია.
        </p>
        <p>
          ობიექტების ეს ინტერაქცია ხდება public interface-ის (API) მეშვეობით.
          Public ინტერფეისი არის იმ მეთოდების და ფროფერთიების ერთობლიობა,
          რომლებიც ხელმისაწვდომია ობიექტის გარეთ და გამოიყენება სხვა ობიექტებთან
          კომუნიკაციისთვის.
        </p>
        <p>
          ჩვენ გვჭირდება გარკვეული გზა რომ დავაგენერიროთ ობიექტები. კლასიკური
          OOP-ის შემთხვევაში ეს გზაა კლასები
        </p>
        <InnerContainer heading3="რა არის კლასები?">
          <p>
            კლასები არის ერთგვარი მოდელები, გეგმა, რომელიც გამოიყენება
            ობიექტების ანუ კლასის ინსტანციების შესაქმნელად, მასში აღწერილი
            საჭირო მახასიათებლების მიხედვით:
          </p>
          <div className="d-flex gap-4 bg-light justify-content-center rounded">
            <figure className="card" style={{ width: "18rem" }}>
              <img
                src="https://py5coding.org/tutorials/images/object_oriented_programming/cars.png"
                alt="oop class"
              />
            </figure>
            <figure className="card" style={{ width: "18rem" }}>
              <img
                src="https://qph.fs.quoracdn.net/main-qimg-a10709c92a235d51986c151a4f4522a7"
                alt="oop class"
              />
            </figure>
          </div>

          <ul className="list-group custom-list">
            <li className="list-group-item bg-dark bg-gradient text-light">
              კლასები იქმნება OOP-ის 4 ძირითადი პრინციპის გათვალისწინებით:
            </li>
            <li className="list-group-item bg-light">
              <h5>აბსტრაქცია:</h5>
              <p>
                აბსტრაქცია გულისხმობს დავმალოთ ისეთი დეტალები, რომლებიც ნაკლებად
                მნიშნვნელოვანია გამოყენებისას.
              </p>
              <p>
                ანალოგია: ავტომობილის მართვისას არ გვჭირდება მისი ყველა შიდა
                დეტალის ცოდნა.
              </p>
            </li>
            <li className="list-group-item bg-light">
              <h5>ენკაფსულაცია:</h5>
              <p>
                ენკაფსულაფია გულისხმობს გარკვეული მეთოდების და ფროფერთიების
                დახურვას(გავხადოთ ისინი private) კლასის შიგნით ისე, რომ ისინი არ
                იყვნენ ხელმისაწვდომი კლასის გარეთ. შესაბამისად, ისინი არ
                იქნებიან public interface-ის ნაწილი. ასე შეგვიძლია გარკვეული
                მახასიათებლები დავიცვათ გარე ჩარევებისაგან;
              </p>
            </li>
            <li className="list-group-item bg-light">
              <h5>მემკვიდრეობა:</h5>
              <p>
                როდესად გვაქვს იერარქიულად დაკავშირებული კლასები, შეიძლება აიგოს
                ზოგადი კლასი, რომელიც განსაზღვრავს მსგავსი ელემენტების საერთო
                თვისებებს.
              </p>
              <p>
                ამ კლასიდან, შემდეგ შეიძლება შეიქმნას მემკვიდრე კლასები,
                რომლებიც უფრო დაკონკრეტებული, სპეციალიზებული იქნებიან და
                თითოეული მათგანი დაამატებს რაიმე უნიკალურ თვისებას ან მეთოდს
                (სუპერკლასები და ქვეკლასები);
              </p>
            </li>
            <li className="list-group-item bg-light">
              <h5>პოლიმორფიზმი: </h5>
              <p>მემკვიდრე კლასმა შეუძლება შეცვალოს მშოებლი კლასის მეთოდები</p>
            </li>
          </ul>
        </InnerContainer>
      </Section>
    </>
  );
};

export default Section1;
